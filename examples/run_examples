#!/usr/bin/env python3

# Copyright 2019, University of Maryland and the MANGO development team.
#
# This file is part of MANGO.
#
# MANGO is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# MANGO is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with MANGO.  If not, see
# <https://www.gnu.org/licenses/>.

import glob
import os
import subprocess
from subprocess import PIPE
import sys
import shutil

print()
print("usage: " + os.path.basename(__file__) + " <1 or more examples to run>")
print("Wildcards (*) are accepted in the example names. For a wildcard as a first character, enclose the string in single or double quotes. Do not include bin/ in the example names. If no examples are specified, all examples will be run")

#####################################################################
# Detect which packages mango was built with:
#####################################################################

filename = 'packages_available'
if not os.path.isfile(filename):
    print("Error! The '",filename,"' file is not present in the examples directory.")
    exit(1)

f = open(filename)
lines = f.readlines()
f.close()
if len(lines) < 1:
    print('Error! The file ',filename,' is empty')
    exit(1)
packages_available = lines[0].strip().split(' ')
print("Mango appears to have been built with the following packages: ",packages_available)

#####################################################################
# Get MANGO_COMMAND_TO_SUBMIT_JOB
#####################################################################

try:
    submitCommand = os.environ["MANGO_COMMAND_TO_SUBMIT_JOB"]
except:
    submitCommand = ""

# If MANGO_COMMAND_TO_SUBMIT_JOB is not set, try getting it by running make in the parent directory:
if submitCommand == "":
    print('Running make to try to get MANGO_COMMAND_TO_SUBMIT_JOB')

    #---- Commands when using CMake build                                                                   
    if os.path.exists(os.getcwd()+"/build"):
        shutil.rmtree(os.getcwd()+"/build")
    os.mkdir(os.getcwd()+"/build")
    os.chdir(os.getcwd()+"/build")
    make_results = subprocess.run(['cmake','..'],stdout=PIPE, universal_newlines=True)
    result_string = make_results.stdout.split("MANGO_COMMAND_TO_SUBMIT_JOB=")[1]
    submitCommand = result_string.split("\n")[0]
    os.chdir("..")
    shutil.rmtree(os.getcwd()+"/build")

    #---- Commands when using CMake build
    #make_results = subprocess.run(['make','--directory=..','print_command_to_submit_job'],capture_output=True)
    #print(make_results)
    # The 'decode' in the next line is needed to convert the byte sequence returned by subprocess into a regular python string.
    #submitCommand = make_results.stdout.decode('utf-8').strip()

print("MANGO_COMMAND_TO_SUBMIT_JOB=",submitCommand)

#####################################################################
# Decide which examples will be run
#####################################################################

print("Running mango examples.")
print()

if len(sys.argv) < 2:
    # Find all examples
    candidate_examples = glob.glob('bin/*')
else:
    candidate_examples = []
    for k in range(1,len(sys.argv)):
        candidate_files = glob.glob('bin/'+sys.argv[k])
        #print("For sys.argv="+sys.argv[k]+", candidate_files=",candidate_files)
        if len(candidate_files) < 1:
            print("WARNING: No files were found matching the argument "+sys.argv[k])
        for j in range(len(candidate_files)):
            filename = candidate_files[j]
            if os.path.isfile(filename):
                candidate_examples.append(filename)


examples = []
for item in candidate_examples:
    shortname = item[4:]
    if os.path.isfile('input/test_parameters.'+shortname):
        examples.append(shortname)

if len(examples)==0:
    print("No examples were found for which there is an executable in examples/bin and a test_parameters.* file in examples/input/")
    exit(0)

print("Here are the examples that will be run:")
for example in examples:
    print("   "+example)

#####################################################################
# Prepare to loop over the examples
#####################################################################

line1="######################################################################################################"
line2="------------------------------------------------------------------------------------------------------"

def comment_line(str):
    str1=str.strip()
    if str1[0]=="!" or str1[0]=="%" or str1[0]=="#":
        return True
    else:
        return False

def first_n_items(str,N):
    splitstr = str.split(',')
    if len(splitstr) <= N:
        return str
    else:
        return (",".join(splitstr[:N]))+"\n"

def algorithm_available(algorithm):
    # This subroutine takes an algorithm name and checks it against the list of available packages.
    for j in range(len(packages_available)):
        package = packages_available[j]
        if package == algorithm[:len(package)]:
            return True
    return False

from tests.verify_mpi_independence import *
from tests.regression_test import *
from tests.verify_increment_and_last_line_matches_internal_line import *

#####################################################################
# Begin the main loop over examples
#####################################################################

examples_actually_run = []
for example in examples:

    print()
    print(line1)
    print("Begnning example "+example)
    print(line1)

    filename = 'input/test_parameters.'+example
    print("Reading "+filename)
    with open(filename,'r') as f:
        lines = f.readlines()

    N_procss = []
    N_worker_groupss = []
    algorithms = []
    true_optima = []

    # Skip comment line(s):
    for j in range(len(lines)):
        if not comment_line(lines[j]):
            break
    j0=j
    # Read line(s) with N_procss, N_worker_groups:
    for j in range(j0,len(lines)):
        if comment_line(lines[j]):
            break
        splitline = lines[j].split(",")
        if len(splitline) != 2:
            print("In examples/"+filename+" line "+str(j)+", expected a 2-item comma-separated list N_procs,N_worker_groups")
            exit(1)

        try:
            N_procss.append(int(splitline[0]))
        except:
            print("In examples/"+filename+" line "+str(j)+", unable to convert the first item to an integer.")
            raise

        try:
            N_worker_groupss.append(int(splitline[1]))
        except:
            print("In examples/"+filename+" line "+str(j)+", unable to convert the second item to an integer.")
            raise

    # Skip comment line(s):
    j0=j
    for j in range(j0,len(lines)):
        if not comment_line(lines[j]):
            break
    # Read line(s) with algorithm(s):
    j0=j
    for j in range(j0,len(lines)):
        if comment_line(lines[j]):
            break
        candidate_algorithm = lines[j].strip()
        if algorithm_available(candidate_algorithm):
            algorithms.append(candidate_algorithm)
    # Skip comment line(s):
    j0=j
    for j in range(j0,len(lines)):
        if not comment_line(lines[j]):
            break
    # Read line(s) with true optima
    j0=j
    for j in range(j0,len(lines)):
        if comment_line(lines[j]):
            break
        splitline = lines[j].strip().split(",")
        try:
            optimum = list(map(float,splitline))
        except:
            print("In examples/"+filename+" line "+str(j)+", failed converting items to float.")
            raise
        true_optima.append(optimum)

    # Done reading the test_parameters.* file.
    print("N_procs:        ",N_procss)
    print("N_worker_groups:",N_worker_groupss)
    print("Algorithms:",algorithms)
    print("True optima:",true_optima)
    print()

    if len(algorithms) == 0:
        print('Skipping this example since no algorithms are available')
        continue
    examples_actually_run.append(example)

    # Remove previous summary files, if they exist:
    filenames = ['output/summary.'+example, 'output/summary_mpi.'+example, 'output/short_summary.'+example, 'output/short_summary_mpi.'+example]
    for file in filenames:
        if os.path.isfile(file):
            os.remove(file)

    # Initialize the contents of the summary files for output
    summary_header = []
    summary_contents = []
    summary_mpi_contents = []
    short_summary_contents = []
    short_summary_mpi_contents = []

    for j_algorithm in range(len(algorithms)):
        algorithm = algorithms[j_algorithm]
        algorithm_with_spaces = (algorithm+",").ljust(35)
        for j_procs in range(len(N_procss)):
            N_procs = N_procss[j_procs]
            N_worker_groups = N_worker_groupss[j_procs]
            mpi_string = (str(N_procs)+",").rjust(6) + (str(N_worker_groups)+",").rjust(6)
            #print()
            print(line2)
            print("Beginning example "+example+" with algorithm="+algorithm+", N_procs="+str(N_procs)+", N_worker_groups="+str(N_worker_groups))
            #print(line2)

            # Write input file
            input_filename = "input/mango_in."+example
            try:
                with open(input_filename,'w') as f:
                    f.write(str(N_worker_groups) + "\n")
                    f.write(algorithm)
            except:
                print("Error writing input file examples/"+input_filename)
                raise

            # Remove a previous output file, if it exists
            output_filename = 'output/mango_out.'+example
            if os.path.isfile(output_filename):
                os.remove(output_filename)
            
            # Run example
            try:
                os.chdir('bin')
            except:
                print("Error changing to the bin directory!")
                raise
            command = submitCommand + " ./"+example
            command = command.replace('NUM_PROCS',str(N_procs))
            print("Submitting command "+command)
            print(command.split())
            sys.stdout.flush()

            try:
                subprocess.call(command.split())
            except:
                print("An error occured running the example!")
                raise
            os.chdir('..')

            # Copy output file and extract its contents
            lines = []
#            print(output_filename)
#            print(os.listdir())
            if os.path.isfile(output_filename):
                new_output_filename = output_filename+"_"+algorithm+"_"+str(N_procs)+"_"+str(N_worker_groups)
                shutil.copyfile(output_filename,new_output_filename)

                with open(output_filename) as f:
                    lines = f.readlines()
                print("got here!!")
            if len(lines) > 5:
                print("got here!!")
                # This run succeeded
                summary_header = lines[:5]
                # Combine 'last' info from the penultimate line with 'best' info from the last line:
                penultimate_line = lines[-2].split(',')
                contents_line = (",".join(penultimate_line[:2])) + ',' + lines[-1]
                summary_mpi_contents.append(algorithm_with_spaces + mpi_string + contents_line)
                if j_procs==0:
                    summary_contents.append(algorithm_with_spaces+contents_line)
                verify_increment_and_last_line_matches_internal_line(output_filename)
            else:
                # This run failed
                summary_mpi_contents.append(algorithm_with_spaces + mpi_string + " FAILED\n")
                if j_procs==0:
                    summary_contents.append(algorithm_with_spaces+" FAILED\n")
        print(example)
    # Add both 'best' and 'last' versions of function_evaluation and seconds:
    old_headings = summary_header[-1].split(',')
    headings = "last_function_evaluation,last_seconds,best_function_evaluation,best_seconds," + (",".join(old_headings[2:]))
    summary_header = summary_header[:-1] + [headings]

    # Write summary files
    N_parameters = 0
    if (len(summary_header)>0):
        N_parameters = int(summary_header[3])

    with open("output/summary."+example,'w') as f:
        if len(summary_header)>0:
            f.write("".join(summary_header[:-1]))
            f.write("algorithm,"+summary_header[-1])
            f.write("".join(summary_contents))
        else:
            f.write('No jobs succeeded!')
    with open("output/summary_mpi."+example,'w') as f:
        if len(summary_header)>0:
            f.write("".join(summary_header[:-1]))
            f.write("algorithm,N_procs,N_worker_groups,"+summary_header[-1])
            f.write("".join(summary_mpi_contents))
        else:
            f.write('No jobs succeeded!')
    with open("output/short_summary."+example,'w') as f:
        if len(summary_header)>0:
            f.write("".join(summary_header[:-1]))
            line = "algorithm,"+summary_header[-1]
            f.write(first_n_items(line,N_parameters+6))
            for line in summary_contents:
                f.write(first_n_items(line,N_parameters+6))
        else:
            f.write('No jobs succeeded!')
    with open("output/short_summary_mpi."+example,'w') as f:
        if len(summary_header)>0:
            f.write("".join(summary_header[:-1]))
            line = "algorithm,N_procs,N_worker_groups,"+summary_header[-1]
            f.write(first_n_items(line,N_parameters+8))
            for line in summary_mpi_contents:
                f.write(first_n_items(line,N_parameters+8))
        else:
            f.write('No jobs succeeded!')

    verify_mpi_independence(example)
    regression_test(example,packages_available=packages_available)

print()
print(line1)
print(line1)
print("Done running examples.")
print()

from tests.verify_language_independence import *
verify_language_independence(examples_run=examples_actually_run)
