#!/usr/bin/env python3

# This script runs the executable "unit_tests" repeatedly, for various numbers of MPI processes.
# The executable "unit_tests" is created by running "make unit_tests" from the main mango directory.

max_N_procs = 5

import subprocess
import sys
import os
import shutil

#####################################################################
# Make sure unit_tests exists
#####################################################################

if not os.path.isfile("unit_tests"):
    print("The executable `unit_tests' does not appear to be present in the mango/tests/ directory")
    print("You need to run `make unit_tests' from the main MANGO directory to build the unit_tests executable.")
    exit(1)

#####################################################################
# Get MANGO_COMMAND_TO_SUBMIT_JOB
#####################################################################

try:
    submitCommand = os.environ["MANGO_COMMAND_TO_SUBMIT_JOB"]
except:
    submitCommand = ""

# If MANGO_COMMAND_TO_SUBMIT_JOB is not set, try getting it by running make in the parent directory:
if submitCommand == "":
    print('Running CMake to try to get MANGO_COMMAND_TO_SUBMIT_JOB')

    #---- Commands when using CMake build
    if os.path.exists(os.getcwd()+"/build"):
        shutil.rmtree(os.getcwd()+"/build")
    os.mkdir(os.getcwd()+"/build")
    os.chdir(os.getcwd()+"/build")
    make_results = subprocess.run(['cmake','..'],capture_output=True, universal_newlines=True)
    result_string = make_results.stdout.split("MANGO_COMMAND_TO_SUBMIT_JOB=")[1]
    submitCommand = result_string.split("\n")[0]
    os.chdir("..")
    shutil.rmtree(os.getcwd()+"/build")
    #---- Commands when using makefile build
    #make_results = subprocess.run(['make','--directory=..','print_command_to_submit_job'],capture_output=True)
    # The 'decode' in the next line is needed to convert the byte sequence returned by subprocess into a regular python string.
    #submitCommand = make_results.stdout.decode('utf-8').strip()

print("MANGO_COMMAND_TO_SUBMIT_JOB=",submitCommand)
#####################################################################
# Loop over N_procs, calling unit_tests each time
#####################################################################

all_succeeded = True
for N_procs in range(1, max_N_procs+1):
    command = submitCommand + " ./unit_tests"
    command = command.replace('NUM_PROCS',str(N_procs))
    print("Submitting command "+command)
    sys.stdout.flush()
    exit_code = subprocess.call(command.split())
    print("exit code: ",exit_code)
    if exit_code != 0:
        all_succeeded = False

if all_succeeded:
    print("Unit tests pass for all values of N_procs.")
else:
    print("!!! Unit tests did not all pass !!!")
    exit(1)
